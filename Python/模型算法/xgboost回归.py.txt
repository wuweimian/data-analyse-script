# -*- coding: utf-8 -*-

import genvs as GENV
G_ENV = GENV.GENVS()
import xgboost as xgb
from xgboost import XGBRegressor
import pandas as pd
import sklearn.metrics
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import report

def show_data_head(des_dir, n=10):
    df = G_ENV.get_features_data_all().head(n)
    report.savedataframe(des_dir, "特征数据预览", df)


################################################################################################
def model_evaluate(model, x_train, x_test, y_train, y_test):
    y_test_pred = model.predict(x_test)
    y_train_pred = model.predict(x_train)

    mse = np.average((y_test_pred - np.array(y_test)) ** 2)
    rmse = np.sqrt(mse)
    scores = model.score(x_test, y_test)

    result_str = ""
    result_str = "均方误差|均方根误差|R平方\n"
    result_str +="{:.2f}|{:.2f}|{:.2f}\n".format(mse,rmse,scores)

    # 保存结果
    report.savestrtb(G_ENV.get_result_dir(), "xgboost回归评估结果", result_str)

def xgboosts_regisson(x_col,y_col,train_size,base_score,booster,colsample_bylevel,colsample_bytree,
             gamma,learning_rate,max_delta_step,max_depth,min_child_weight,missing,n_estimators,
             n_jobs,nthread,objective,random_state,reg_alpha,reg_lambda,scale_pos_weight,
             seed,silent,subsample
          ):

    col = x_col + "|" + y_col
    df = G_ENV.get_features_data(col)
    df = df.dropna()
    x = (df.iloc[:, 0:len(df.columns) - 1]).values
    y = (df.iloc[:, len(df.columns) - 1]).values
    x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=train_size, random_state=0)


    if missing == 'None':
        missing = None
    if nthread == 'None':
        nthread = None
    if seed == 'None':
        seed = None
    if silent == 'True':
        silent = True
    if silent == 'False':
        silent = False

    xgboost = XGBRegressor(base_score=base_score, booster=booster, colsample_bylevel=colsample_bylevel,
       colsample_bytree=colsample_bytree, gamma=gamma, learning_rate=learning_rate, max_delta_step=max_delta_step,
       max_depth=max_depth, min_child_weight=min_child_weight, missing=missing, n_estimators=n_estimators,
       n_jobs=n_jobs, nthread=nthread, objective=objective, random_state=random_state,
       reg_alpha=reg_alpha, reg_lambda=reg_lambda, scale_pos_weight=scale_pos_weight, seed=seed,
       silent=silent, subsample=subsample)
    model_xgboost = xgboost.fit(x_train, y_train)

    #持久化
    report.saveskmd(G_ENV.get_result_dir(), "模型实例", model_xgboost)

    model_evaluate(model_xgboost, x_train, x_test, y_train, y_test)
    #生成报告
    report.createhtml("运行结果", G_ENV.get_result_dir())

########################################################################################
# 以下是模板
if (__name__ == '__main__') & ('XXJOB' not in globals()):
    G_ENV.baseDir="C:/Users/Tim/Desktop/automodel/V2/data"
    G_ENV.projectId = "projectId"
    G_ENV.jobId="jobId"
    G_ENV.instanceId="instanceId"
    x_col = "2g_liuliang|total_liuliang|3g_liuliang|country_liuliang|mangshi_liuliang|arpu|xianshi_liuliang|province_liuliang"
    train_size = 0.7
    base_score = 0.5
    booster = 'gbtree'
    colsample_bylevel = 1
    colsample_bytree = 1
    gamma = 0
    learning_rate = 0.1
    max_delta_step = 0
    max_depth = 3
    min_child_weight = 1
    missing = None
    n_estimators = 100
    n_jobs = 1
    nthread = None
    objective = 'reg:linear'
    random_state = 0
    reg_alpha = 0
    reg_lambda = 1
    scale_pos_weight = 1
    seed = None
    silent = True
    subsample = 1
    xgboosts_regisson(x_col,"arpu",train_size,base_score,booster,colsample_bylevel,colsample_bytree,
             gamma,learning_rate,max_delta_step,max_depth,min_child_weight,missing,n_estimators,
             n_jobs,nthread,objective,random_state,reg_alpha,reg_lambda,scale_pos_weight,
             seed,silent,subsample)
