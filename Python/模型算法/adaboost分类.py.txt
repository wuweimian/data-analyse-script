# -*- coding: utf-8 -*-

import genvs as GENV
G_ENV = GENV.GENVS()
import xgboost as xgb
from xgboost import XGBClassifier
import pandas as pd
import sklearn.metrics
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix,recall_score,classification_report
import report
import matplotlib.pyplot as plt
import itertools

def show_data_head(des_dir, n=10):
    df = G_ENV.get_features_data_all().head(n)
    report.savedataframe(des_dir, "特征数据预览", df)


################################################################################################
def model_evaluate(model, x_train, x_test, y_train, y_test):
    y_train_pred = model.predict(x_train)
    y_test_pred = model.predict(x_test)
    result_str = "类别|准确率\n"
    result_str += "{}|{}\n".format("训练集准确率",accuracy_score(y_train, y_train_pred))
    result_str += "{}|{}\n".format("测试集准确率", accuracy_score(y_test, y_test_pred))
    result_str2 = "类别|精确率|召回率|F值|测试数量\n"
    if hasattr(model, 'predict_proba'):
        y_score = model.predict_proba(x_test)
        y_hat = model.predict(x_test)

    gbdt_report = classification_report(y_test, y_hat)
    lines = gbdt_report.splitlines()
    res = []
    for row in lines[2:-2]:
       rows = row.split('      ')
       result_str2 += "{}|{}|{}|{}|{}\n".format(rows[1].replace(' ', ''), rows[2].replace(' ', ''), rows[3].replace(' ', ''), rows[4].replace(' ', ''), rows[5].replace(' ', ''))

    fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_test, y_score[:, 1])
    auc = sklearn.metrics.auc(fpr, tpr)
    result_str += "{}|{}\n".format("auc值", auc)
    # 保存结果
    report.savestrtb(G_ENV.get_result_dir(), "xgboost模型评估结果", result_str)
    report.savestrtb(G_ENV.get_result_dir(), "xgboost测试集结果", result_str2)

    # 混淆矩阵
    labels = [0, 1]
    confusion_matrix_main(y_test, y_hat, labels)
    # ROC和AUC
    roc_auc(fpr, tpr, auc)
    # K-S曲线
    ks(tpr, fpr)

# 混淆矩阵调用函数
def confusion_matrix_main(y_true,y_predict,labels):
    cnf_matrix = confusion_matrix(y_true, y_predict)
    np.set_printoptions(precision=2)

    # Plot non-normalized confusion matrix
    class_names = labels
    #plt.figure(figsize=(3, 3))
    plot_confusion_matrix(cnf_matrix
                          , classes=class_names
                          , title='混淆矩阵')

# 绘制混淆矩阵的图形
def plot_confusion_matrix(cm, classes,
                          title='混淆矩阵',
                          cmap=plt.cm.Blues):

    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.tick_params(labelsize=13)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=0)
    plt.yticks(tick_marks, classes)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('实际值')
    plt.xlabel('预测值')

    report.saveimg(G_ENV.get_result_dir(), "xgboost模型混淆矩阵", plt)
    #report.createhtml("xgboost模型混淆矩阵", G_ENV.get_result_dir())
    plt.show()

def roc_auc(fpr, tpr,auc):
    plt.rcParams['font.sans-serif'] = ['SimHei']
    #plt.figure(figsize=(3, 3))
    plt.plot(fpr, tpr, c='g', lw=2, alpha=0.7, label='auc = %.3f' % auc)
    plt.plot((0, 1), (0, 1), c='#808080', lw=2, alpha=0.7)
    plt.xlim((-0.01, 1.02))
    plt.ylim((-0.01, 1.02))
    plt.xticks(np.arange(0, 1.1, 0.1))
    plt.yticks(np.arange(0, 1.1, 0.1))
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.grid(b=True, ls=':')
    plt.legend(loc='lower right', fancybox=True, framealpha=0.8)
    plt.title('ROC和AUC')
    report.saveimg(G_ENV.get_result_dir(), "xgboost模型ROC曲线", plt)
    #report.createhtml("xgboost模型ROC曲线", G_ENV.get_result_dir())
    plt.show()

# ks曲线
def ks(tpr,fpr):
    # 画ks曲线
    #plt.figure(figsize=(3, 3))
    plt.plot(tpr, label='tbr')
    plt.plot(fpr, label='fbr')
    plt.plot(tpr - fpr, label="tpr - fpr")
    plt.legend(loc=0, ncol=1)
    plt.title('K-S曲线')
    report.saveimg(G_ENV.get_result_dir(), "xgboost模型K-S曲线", plt)
    #report.createhtml("xgboost模型K-S曲线", G_ENV.get_result_dir())
    plt.show()

def xgboosts_classfier(x_col,y_col,train_size,base_score,booster,colsample_bylevel,colsample_bytree,
             gamma,learning_rate,max_delta_step,max_depth,min_child_weight,missing,n_estimators,
             n_jobs,nthread,objective,random_state,reg_alpha,reg_lambda,scale_pos_weight,
             seed,silent,subsample
          ):
    col = x_col+"|"+y_col
    df = G_ENV.get_features_data(col)
    df = df.dropna()
    col_list = x_col.split('|')
    x = (df[col_list]).values
    y = df[y_col].values
    x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=train_size, random_state=0)

    if missing == 'None':
        missing = None
    if nthread == 'None':
        nthread = None
    if seed == 'None':
        seed = None
    if silent == 'True':
        silent = True
    if silent == 'False':
        silent = False

    xgboost = XGBClassifier(base_score=base_score, booster=booster, colsample_bylevel=colsample_bylevel,
       colsample_bytree=colsample_bytree, gamma=gamma, learning_rate=learning_rate, max_delta_step=max_delta_step,
       max_depth=max_depth, min_child_weight=min_child_weight, missing=missing, n_estimators=n_estimators,
       n_jobs=n_jobs, nthread=nthread, objective=objective, random_state=random_state,
       reg_alpha=reg_alpha, reg_lambda=reg_lambda, scale_pos_weight=scale_pos_weight, seed=seed,
       silent=silent, subsample=subsample)
    model_xgboost = xgboost.fit(x_train, y_train)

    #持久化
    report.saveskmd(G_ENV.get_result_dir(), "模型实例", model_xgboost)

    model_evaluate(model_xgboost, x_train, x_test, y_train, y_test)
    #生成报告
    report.createhtml("运行结果", G_ENV.get_result_dir())

########################################################################################
# 以下是模板
if (__name__ == '__main__') & ('XXJOB' not in globals()):
    G_ENV.baseDir="C:/Users/Tim/Desktop/automodel/V2/data"
    G_ENV.projectId = "projectId"
    G_ENV.jobId="jobId"
    G_ENV.instanceId="instanceId"
    x_col = "2g_liuliang|total_liuliang|3g_liuliang|country_liuliang|mangshi_liuliang|arpu|xianshi_liuliang|province_liuliang"
    train_size = 0.7
    base_score = 0.5
    booster = 'gbtree'
    colsample_bylevel = 1
    colsample_bytree = 1
    gamma = 0
    learning_rate = 0.1
    max_delta_step = 0
    max_depth = 3
    min_child_weight = 1
    missing = None
    n_estimators = 100
    n_jobs = 1
    nthread = None
    objective = 'binary:logistic'
    random_state = 0
    reg_alpha = 0
    reg_lambda = 1
    scale_pos_weight = 1
    seed = None
    silent = True
    subsample = 1
    xgboosts_classfier(x_col,"flag",train_size,base_score,booster,colsample_bylevel,colsample_bytree,
             gamma,learning_rate,max_delta_step,max_depth,min_child_weight,missing,n_estimators,
             n_jobs,nthread,objective,random_state,reg_alpha,reg_lambda,scale_pos_weight,
             seed,silent,subsample)
