# -*- coding: utf-8 -*-


import genvs as GENV
G_ENV = GENV.GENVS()

import pandas as pd
import numpy as np

from sklearn import metrics
from sklearn.metrics import calinski_harabaz_score
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import report

def show_data_head(des_dir, n=10):
    df = G_ENV.get_features_data_all().head(n)
    report.savedataframe(des_dir, "特征数据预览", df)


"""
n_clusters:簇的个数，即你想聚成几类
init: 初始簇中心的获取方法
n_init: 获取初始簇中心的更迭次数，为了弥补初始质心的影响，算法默认会初始10次质心，实现算法，然后返回最好的结果。
max_iter: 最大迭代次数（因为kmeans算法的实现需要迭代）
tol: 容忍度，即kmeans运行准则收敛的条件
precompute_distances：是否需要提前计算距离，这个参数会在空间和时间之间做权衡，如果是True 会把整个距离矩阵都放到内存中，auto 会默认在数据样本大于featurs*samples 的数量大于12e6 的时候False,False 时核心实现的方法是利用Cpython 来实现的
verbose: 冗长模式
random_state: 随机生成簇中心的状态条件。
copy_x: 对是否修改数据的一个标记，如果True，即复制了就不会修改数据。就是是否对输入数据继续copy 操作，以便不修改用户的输入数据。
n_jobs: 并行设置
algorithm: kmeans的实现算法，有：‘auto’, ‘full’, ‘elkan’, 其中 'full’表示用EM方式实现

"""
def kmeans_cluster(x_col,algorithm,copy_x,init,max_iter,n_clusters,n_init,n_jobs,
                   precompute_distances,random_state,tol,verbose):
    df = G_ENV.get_features_data(x_col)
    train = np.array(df)

    # None类型转换
    if random_state == 'None':
        random_state = None
    if copy_x == 'True':
        copy_x = True
    if copy_x == 'False':
        copy_x = False
    # kmeans
    mb_kmeans = KMeans(algorithm=algorithm, copy_x=copy_x, init=init, max_iter=max_iter,
    n_clusters=n_clusters, n_init=n_init, n_jobs=n_jobs, precompute_distances=precompute_distances,
    random_state=random_state, tol=tol, verbose=verbose)
    mb_kmeans.fit(train)

    ch = calinski_harabaz_score(train, mb_kmeans.predict(train))
    ms = silhouette_score(train, mb_kmeans.predict(train))
    result_str=""
    result_str +="Calinski-Harabasz分数|轮廓系数\n"
    result_str +="{}|{}\n".format(ch,ms)
    # 持久化
    report.saveskmd(G_ENV.get_result_dir(), "模型实例", mb_kmeans)
    #生成报告
    report.savestrtb(G_ENV.get_result_dir(), "Kmeans模型评估结果", result_str)
    report.createhtml("运行结果", G_ENV.get_result_dir())

########################################################################################
# 以下是模板
if (__name__ == '__main__') & ('XXJOB' not in globals()):
    G_ENV.baseDir="C:/Users/Tim/Desktop/automodel/V2/data"
    G_ENV.projectId = "projectId"
    G_ENV.jobId="jobId"
    G_ENV.instanceId="instanceId"
    algorithm = 'auto'
    copy_x = True
    init = 'k-means++'
    max_iter = 300
    n_clusters = 2
    n_init = 10
    n_jobs = 1
    precompute_distances = 'auto'
    random_state = None
    tol = 0.0001
    verbose = 0
    x_col = "2g_liuliang|total_liuliang|3g_liuliang|country_liuliang|mangshi_liuliang|arpu|xianshi_liuliang|province_liuliang"

    kmeans_cluster(x_col,algorithm,copy_x,init,max_iter,n_clusters,n_init,n_jobs,
                   precompute_distances,random_state,tol,verbose)
