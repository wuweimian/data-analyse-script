# -*- coding: utf-8 -*-


import genvs as GENV
G_ENV = GENV.GENVS()

import pandas as pd
import sklearn.metrics
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
from sklearn.preprocessing import LabelEncoder
import report

def show_data_head(des_dir, n=10):
    df = G_ENV.get_features_data_all().head(n)
    report.savedataframe(des_dir, "特征数据预览", df)

################################################################################################
def model_evaluate(model, x_train, x_test, y_train, y_test):
    y_train_pred = model.predict(x_train)
    y_test_pred = model.predict(x_test)
    result_str = ""
    result_str += u'* 训练集准确率：{}\n'.format(accuracy_score(y_train, y_train_pred))
    result_str += u'* 测试集准确率：{}\n'.format(accuracy_score(y_test, y_test_pred))
    result_str += u'---\n'
    if hasattr(model, 'predict_proba'):
        y_score = model.predict_proba(x_test)
        #print("model.classes:{}".format(model.classes_))
        #print("y_score:{}".format(y_score))
        y_hat = model.predict(x_test)
    #result_str += '指标:{}\n'.format(precision_recall_fscore_support(y_test, y_hat))
    result_str += 'report:\n'
    result_str += '{}\n'.format(classification_report(y_test, y_hat))
    fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_test, y_score[:, 1], pos_label=2)
    auc = sklearn.metrics.auc(fpr, tpr)
    result_str += u'---\n'
    result_str += "* auc:{}\n".format(auc)
    # 保存结果
    report.savestrmd(G_ENV.get_result_dir(), "最近邻分类模型评估结果", result_str)



def knneighbors(x_col,y_col, train_size=0.7,algorithm='auto', leaf_size=30, metric='minkowski',
           metric_params=None, n_jobs=1, n_neighbors=2, p=2,weights='uniform'):
    col = x_col+"|"+y_col
    df_dir = G_ENV.baseDir + "/" + G_ENV.projectId + "/work_file/iris.txt"
    df = pd.read_csv(df_dir, sep='|')
    df = df.dropna()
    x = (df.iloc[:, 0:len(df.columns) - 1]).values
    y = (df.iloc[:, len(df.columns) - 1]).values
    x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=train_size, random_state=0)
    KNN = KNeighborsClassifier(algorithm=algorithm, leaf_size=leaf_size, metric=metric,
           metric_params=metric_params, n_jobs=n_jobs, n_neighbors=n_neighbors, p=p, weights=weights)
    print(KNN)
    model_KNN = KNN.fit(x_train, y_train)
    #持久化
    report.saveskmd(G_ENV.get_result_dir(), "模型实例", model_KNN)

    model_evaluate(model_KNN, x_train, x_test, y_train, y_test)
    #生成报告
    report.createhtml("运行结果", G_ENV.get_result_dir())

########################################################################################
# 以下是模板
if (__name__ == '__main__') & ('XXJOB' not in globals()):
    G_ENV.baseDir="C:/Users/Tim/Desktop/automodel/V2/data"
    G_ENV.projectId = "projectId"
    G_ENV.jobId="jobId"
    G_ENV.instanceId="instanceId"
    x_col = "sepal_length|sepal_width|petal_length|petal_width|species"
    train_size = 0.7

    algorithm = 'auto'
    leaf_size = 30
    metric = 'minkowski'
    n_neighbors = 2
    knneighbors(x_col,"species", train_size, algorithm, leaf_size)
