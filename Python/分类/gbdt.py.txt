# -*- coding: utf-8 -*-


import genvs as GENV
G_ENV = GENV.GENVS()

import pandas as pd
import sklearn.metrics
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import precision_recall_fscore_support
from sklearn.preprocessing import LabelEncoder
import report

def get_features_data(col):
    df_dir = G_ENV.baseDir+"/"+G_ENV.projectId+"/work_file/features.csv"    
    df = pd.read_csv(df_dir, sep=',')
    col_list = col.split('|')
    df = df[col_list]
    return df

def update_features(df):
	df_dir = G_ENV.baseDir+"/"+G_ENV.projectId+"/work_file/features.csv"
	df.to_csv(df_dir,index=False)
	
def get_result_dir():
	des_dir= G_ENV.baseDir+"/"+G_ENV.projectId+"/"+G_ENV.jobId+"/"+G_ENV.instanceId+"/result/"
	return des_dir
# 以上为模板
################################################################################################
def model_evaluate(model, x_train, x_test, y_train, y_test):
    y_train_pred = model.predict(x_train)
    y_test_pred = model.predict(x_test)
    result_str = ""
    result_str += u'* 训练集准确率：{}\n'.format(accuracy_score(y_train, y_train_pred))
    result_str += u'* 测试集准确率：{}\n'.format(accuracy_score(y_test, y_test_pred))
    result_str += u'---\n'
    if hasattr(model, 'predict_proba'):
        y_score = model.predict_proba(x_test)
        #print("model.classes:{}".format(model.classes_))
        #print("y_score:{}".format(y_score))
        y_hat = model.predict(x_test)
    #result_str += '指标:{}\n'.format(precision_recall_fscore_support(y_test, y_hat))
    result_str += 'report:\n'
    result_str += '{}\n'.format(classification_report(y_test, y_hat))
    fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_test, y_score[:, 1], pos_label=2)
    auc = sklearn.metrics.auc(fpr, tpr)
    result_str += u'---\n'
    result_str += "* auc:{}\n".format(auc)
    # 保存结果
    report.savestrmd(get_result_dir(), "GDBT模型评估结果", result_str)



def gbdt(x_col,y_col, train_size=0.7, n_estimators=150, learning_rate=0.1, max_depth=8):
    col = x_col+"|"+y_col
    df = get_features_data(col)
    df = df.dropna()
    x = (df.iloc[:, 0:len(df.columns) - 1]).values
    y = (df.iloc[:, len(df.columns) - 1]).values
    x_train, x_test, y_train, y_test = train_test_split(x, y, train_size=train_size, random_state=0)
    GBDT = GradientBoostingClassifier(n_estimators=n_estimators, learning_rate=learning_rate, max_depth=max_depth)
    model_GBDT = GBDT.fit(x_train, y_train)
    model_evaluate(model_GBDT, x_train, x_test, y_train, y_test)
    #生成报告
    report.createhtml("运行结果", get_result_dir())

########################################################################################
# 以下是模板
if (__name__ == '__main__') & ('XXJOB' not in globals()):
    G_ENV.baseDir="C:/Users/user/Desktop/automodel/script/V2/data"
    G_ENV.projectId = "projectId"
    G_ENV.jobId="jobId"
    G_ENV.instanceId="instanceId"
    x_col = "a_age_x|a_arpu_x|a_age_1|a_age_y"
    train_size = 0.7
    n_estimators = 10
    learning_rate = 0.1
    max_depth = 8    
    gbdt(x_col,"b_age", train_size, n_estimators, learning_rate, max_depth)
